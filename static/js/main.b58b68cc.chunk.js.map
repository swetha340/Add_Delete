{"version":3,"sources":["Available.js","App.js","serviceWorker.js","index.js"],"names":["Available","avail","deleteItem","console","log","className","map","item","key","Button","variant","onClick","App","useState","pos","setAvail","i","length","addItem","newavail","filter","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"oQAyBeA,MApBd,YAAwC,IAApBC,EAAmB,EAAnBA,MAAMC,EAAa,EAAbA,WAEvB,OADCC,QAAQC,IAAIH,GAET,yBAAKI,UAAU,YACX,mDACA,6BAAK,6BAEJJ,EAAMK,KAAI,SAACC,GAAD,OACX,yBAAKC,IAAKD,GACN,yBAAKF,UAAU,OACb,wBAAIA,UAAU,YAAYE,GAC1B,kBAACE,EAAA,EAAD,CAAQC,QAAQ,SAASL,UAAU,WAAWM,QAAS,kBAAIT,EAAWK,KAAtE,WAEF,mCCkCDK,MA7Cf,WAAgB,IAAD,EACQC,mBAAS,CAAC,IAAI,OAAO,SAAS,MAAM,OAAO,UADnD,mBACNC,EADM,aAEYD,mBAAS,CAAC,WAFtB,mBAENZ,EAFM,KAEAc,EAFA,KAqBb,OACF,yBAAKV,UAAU,YAEf,yBAAKA,UAAU,YACH,6CACA,6BAAK,6BAEJS,EAAIR,KAAI,SAACC,GAAD,OACT,yBAAKC,IAAKD,GACN,yBAAKF,UAAU,OACb,wBAAIA,UAAU,YAAYE,GAC1B,kBAACE,EAAA,EAAD,CAAQC,QAAQ,UAAUL,UAAU,WAAWM,QAAS,kBA7BzD,SAACH,GACd,IAAIQ,EACF,IAAIA,EAAE,EAAEA,EAAEf,EAAMgB,QAEXhB,EAAMe,IAAIR,EAFQQ,KAOpBA,GAAGf,EAAMgB,QAETF,EAAS,GAAD,mBAAKd,GAAL,CAAWO,KAkBkDU,CAAQX,KAApE,QAEF,kCAMR,kBAAC,EAAD,CAAWN,MAAOA,EAAOC,WAvBb,SAACM,GACjB,IAAMW,EAAWlB,EAAMmB,QAAO,SAAAb,GAAI,OAAEA,GAAMC,KAC1CO,EAASI,MAGb,MCjBoBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnC,QAAQmC,MAAMA,EAAMC,c","file":"static/js/main.b58b68cc.chunk.js","sourcesContent":["import React from 'react'\nimport { Button } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n function Available({avail,deleteItem}) {\n     console.log(avail)\n    return (\n        <div className=\"col-sm-6\">\n            <h1>Available Positions</h1>\n            <br/><br/>\n\n            {avail.map((item)=>\n            <div key={item} >\n                <div className=\"row\">\n                  <h3 className=\"col-sm-4\">{item}</h3>\n                  <Button variant=\"danger\" className=\"col-sm-4\" onClick={()=>deleteItem(item)}>Delete</Button>\n                </div>\n                <hr />\n            </div>\n            )}\n        </div>\n    )\n}\n\nexport default Available;","import React, {useState} from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport { Button } from 'react-bootstrap';\nimport Available from './Available';\n\nfunction App() {\n  const [pos,setPos] = useState(['C','Java','Python','C++','Perl','react']);\n  const [avail,setAvail] = useState(['react']);\n  const addItem =(key)=>{\n    let i;\n      for(i=0;i<avail.length;i++)\n      {\n        if(avail[i]==key)\n        {\n          break;\n        }\n      }\n      if(i==avail.length)\n      {\n         setAvail([...avail,key])\n      }\n  }\n  const deleteItem =(key)=>{\n    const newavail = avail.filter(item=>item!=key);\n    setAvail(newavail);\n  }\n  return (\n<div className=\"row body\">\n\n<div className=\"col-sm-6\">\n            <h1>All Positions</h1>\n            <br/><br/>\n\n            {pos.map((item)=>\n            <div key={item}>\n                <div className=\"row\" >\n                  <h3 className=\"col-sm-4\">{item}</h3>\n                  <Button variant=\"primary\" className=\"col-sm-4\" onClick={()=>addItem(item)}>Add</Button>\n                </div>\n                <hr />\n            </div>\n            )}\n\n      </div>\n\n        <Available avail={avail} deleteItem={deleteItem}/>;\n</div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}